<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" layout="vertical"
        creationComplete="setup()">
<mx:Script>
  <![CDATA[
  import mx.olap.*;
  import mx.collections.ArrayCollection;
  import mx.collections.XMLListCollection;
  import mx.collections.ICollectionView;
  import mx.events.CubeEvent;
  import mx.controls.OLAPDataGrid;
  import mx.olap.OLAPCube;
  import mx.olap.OLAPQuery;
  
  import mx.rpc.AsyncResponder;
  import mx.rpc.AsyncToken;
  import mx.rpc.events.ResultEvent;
  import mx.rpc.events.FaultEvent;
  
  private function setup():void {    
    var array:Array = 
           [ {name:'Tony',     product:'MediaPlayer',   type:'iPod',     year:2007,   value:299},
         {name:'Tony',     product:'Computer',   type:'MacBook Pro', year:2007,   value:2990},
         {name:'Tony',     product:'Computer',   type:'iMac',     year:2008,   value:1499},
         {name:'Daniel',  product:'Computer',   type:'MacBook Pro', year:2007,   value:2990},
         {name:'Daniel',   product:'MediaPlayer',   type:'iPod',     year:2007,   value:299},
         {name:'Daniel',   product:'MediaPlayer',   type:'iPod Nano',   year:2008,   value:149}
         ]
    cube.dataProvider = new ArrayCollection(array);
    cube.addEventListener(CubeEvent.CUBE_COMPLETE, runQueryYearByProduct);
    cube.refresh();  
  }

  private function runQueryYear(event:CubeEvent=null):void
  {
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").children);  
    query.getAxis(OLAPQuery.COLUMN_AXIS).addSet(yearSet);  

    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
  }
  

  // DOESN'T WORK. Seems to require column, even tought that's shouldn't be the case.
  private function runQueryByYear(event:CubeEvent=null):void
  {
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").children);  
    query.getAxis(OLAPQuery.ROW_AXIS).addSet(yearSet);  

    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
  }

  private function runQueryYearByProduct(event:CubeEvent=null):void
  {
    var query:OLAPQuery = new OLAPQuery();
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(
              cube.findDimension("Year").findAttribute("Year").children);
    var colAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS); 
    colAxis.addSet(yearSet);  

    var productSet:IOLAPSet = new OLAPSet();
    productSet.addElements(
          cube.findDimension("Product").findAttribute("Product").children);

    query.getAxis(OLAPQuery.ROW_AXIS).addSet(productSet);

    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
    token.addResponder(
        new AsyncResponder(displayResult, olapFaultHandler));
  }
  
  private function runQueryYearByProductValue(event:CubeEvent=null):void
  {
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").children);  
    var colAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);      
    colAxis.addSet(yearSet);  
      
    
    var productSet:IOLAPSet = new OLAPSet();
    productSet.addElements(cube.findDimension("Product").findAttribute("Product").children);
    
    query.getAxis(OLAPQuery.ROW_AXIS).addSet(productSet);
        
    var slicerQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.SLICER_AXIS);
    var valueSet:OLAPSet= new OLAPSet();
    valueSet.addElement(
        cube.findDimension("Measures").findMember("VALUE_OF_PRODUCTS")); 
    slicerQueryAxis.addSet(valueSet);
    
    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
    
  }

  private function runQueryYearByProductValueWithTotal(event:CubeEvent=null):void
  {
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").members);  
    var colAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);      
    colAxis.addSet(yearSet);  
      
    
    var productSet:IOLAPSet = new OLAPSet();
    productSet.addElements(cube.findDimension("Product").findAttribute("Product").members);
    
    query.getAxis(OLAPQuery.ROW_AXIS).addSet(productSet);
        
    var slicerQueryAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.SLICER_AXIS);         
    var countSet:OLAPSet= new OLAPSet(); 
    countSet.addElement(cube.findDimension("Measures").findMember("VALUE_OF_PRODUCTS")); 
    slicerQueryAxis.addSet(countSet); 
    
    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
    
  }
  
  private function runQueryYearByProductWithTotal(event:CubeEvent=null):void
  {
    trace("Cube loaded");
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").members);  
    var colAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);      
    colAxis.addSet(yearSet.hierarchize(true));  
      
    
    var productSet:IOLAPSet = new OLAPSet();
    productSet.addElements(cube.findDimension("Product").findAttribute("Product").members);
    
    query.getAxis(OLAPQuery.ROW_AXIS).addSet(productSet);
    //rowAxis.addSet(ownerSet.hierarchize(true));


    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
  }
        
  private function runQueryYearByOwnerProducts(event:CubeEvent=null):void
  {
    trace("Cube loaded");
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").children);  
    var colAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);      
    colAxis.addSet(yearSet.hierarchize(true));  
      
    
    var ownerSet:IOLAPSet = new OLAPSet();
    ownerSet.addElements(cube.findDimension("Owner").findAttribute("Name").members);
    var productSet:IOLAPSet = new OLAPSet();
    productSet.addElements(cube.findDimension("Product").findAttribute("Product").children);
    
    var rowAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.ROW_AXIS);
    rowAxis.addSet(ownerSet.hierarchize(true).crossJoin(productSet));
    //rowAxis.addSet(ownerSet.hierarchize(true));


    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
  }
  
  private function runQueryYearByProductOwner(event:CubeEvent=null):void
  {
    var query:OLAPQuery = new OLAPQuery();

    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(
               cube.findDimension("Year").findAttribute("Year").children);
    query.getAxis(OLAPQuery.COLUMN_AXIS).addSet(yearSet);

    var productSet:IOLAPSet = new OLAPSet();
    var ownerSet:IOLAPSet = new OLAPSet();
    ownerSet.addElements(cube.findDimension("Owner")
                .findAttribute("Name").children);
    productSet.addElements(cube.findDimension("Product")
                .findAttribute("Product").children);

    query.getAxis(OLAPQuery.ROW_AXIS)
        .addSet(productSet.crossJoin(ownerSet));

    // QUERY CUBE
    var token:AsyncToken = cube.execute(query);
    token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
  }
  
  private function runQueryYearOwnerByProduct(event:CubeEvent=null):void
  {
    trace("Cube loaded");
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").children);  
    var colAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);      
    var ownerSet:IOLAPSet = new OLAPSet();
    ownerSet.addElements(cube.findDimension("Owner").findAttribute("Name").children);
    colAxis.addSet(yearSet.crossJoin(ownerSet));  
      
    
    var productSet:IOLAPSet = new OLAPSet();
    productSet.addElements(cube.findDimension("Product").findAttribute("Product").children);
    
    var rowAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.ROW_AXIS);
    rowAxis.addSet(productSet);


    // QUERY CUBE
    trace("Excuting OLAP query");
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
  }  
  
  private function runQueryYearProductsByOwner(event:CubeEvent=null):void
  {
    trace("Cube loaded");
    var query:OLAPQuery = new OLAPQuery();
          
    var yearSet:IOLAPSet = new OLAPSet();
    yearSet.addElements(cube.findDimension("Year").findAttribute("Year").members);  
    var colAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.COLUMN_AXIS);      
    var productSet:IOLAPSet = new OLAPSet();
    productSet.addElements(cube.findDimension("Product").findAttribute("Product").members);

    colAxis.addSet(yearSet.hierarchize(true).crossJoin(productSet).hierarchize(true));
    
    var ownerSet:IOLAPSet = new OLAPSet();
    ownerSet.addElements(cube.findDimension("Owner").findAttribute("Name").members);
    
    var rowAxis:IOLAPQueryAxis = query.getAxis(OLAPQuery.ROW_AXIS);
    rowAxis.addSet(ownerSet.hierarchize(true));


    // QUERY CUBE
    trace("Excuting OLAP query");
    var token:AsyncToken = cube.execute(query);
        token.addResponder(new AsyncResponder(displayResult, olapFaultHandler));
  }  
  
  private function displayResult(result:Object, token:Object=null):void
  {
    trace("OLAP query complete.");
    olapGrid.dataProvider = result as IOLAPResult;
  }
  
  private function olapFaultHandler(msg:Object):void
  {
    mx.controls.Alert.show(msg as String);
  }
  
  [Bindable]
  private var queries:Array = 
    [{label:"YearCol", data:runQueryYear},
     //{label:"YearRow", data:runQueryByYear},
     {label:"YearByProduct", data:runQueryYearByProduct},
     {label:"YearByProductForCount", data:runQueryYearByProductValue},    
     {label:"YearByProductWithTotal", data:runQueryYearByProductWithTotal},
     {label:"YearProductsByOwner", data:runQueryYearProductsByOwner},
     {label:"YearByOwnerProducts", data:runQueryYearByOwnerProducts},
     {label:"YearByProductOwner", data:runQueryYearByProductOwner},     
     {label:"YearOwnerByProduct", data:runQueryYearOwnerByProduct},  
     {label:"YearByProductValueWithTotal", data:runQueryYearByProductValueWithTotal},  
    ]
    
  ]]>
</mx:Script>
<mx:ButtonBar dataProvider="{queries.slice(0,3)}" itemClick="event.item.data();" />
<mx:ButtonBar dataProvider="{queries.slice(3,6)}" itemClick="event.item.data();" />
<mx:ButtonBar dataProvider="{queries.slice(6,9)}" itemClick="event.item.data();" />

<mx:OLAPCube id="cube">
  <!-- Dimension 1 Owner-->
   <mx:OLAPDimension name="Owner" >
     <mx:OLAPAttribute dataField="name" name="Name"/>
   </mx:OLAPDimension>
  <!-- Dimension 2 Product-->
   <mx:OLAPDimension name="Product" >
     <mx:OLAPAttribute dataField="product" name="Product"/>
   </mx:OLAPDimension>
  <!-- Dimension 3 Year-->
   <mx:OLAPDimension name="Year" >
     <mx:OLAPAttribute dataField="year" name="Year"/>
       <mx:OLAPHierarchy name="YearHierarchy" hasAll="true" >
         <mx:OLAPLevel attributeName="Year" />
       </mx:OLAPHierarchy>
   </mx:OLAPDimension>

  <!-- Measures -->
  <mx:OLAPMeasure name="NUMBER_OF_PRODUCTS" dataField="value" aggregator="COUNT" />  
  <mx:OLAPMeasure name="VALUE_OF_PRODUCTS" dataField="value" aggregator="SUM" />  
</mx:OLAPCube>
<mx:OLAPDataGrid id="olapGrid"  width="100%" height="100%"  />


</mx:Application>
